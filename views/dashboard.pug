html
  head
    title Dashboard
    link(rel="stylesheet", href="/dashboard.css")
    link(rel="stylesheet", href="https://fonts.googleapis.com/css?family=Press+Start+2P&display=swap")
  body
    .header
      h1 Dashboard

    .actions
      a(href="/logout") Logout
      a(href="/") Home
      button#toggleGenres(type="button") Toggle Genres
      form#searchGenreForm(action="/find/collection", method="get", style="display:inline;")
        input#searchGenreInput(type="text", name="genre", placeholder="Buscar pasta...", required)
        button(type="submit") Buscar

  .main-layout
    .recent-sidebar
      h2 Recently Played
      ul#recentTracks
        if recentlyPlayed && recentlyPlayed.length
          each track, idx in recentlyPlayed
            if idx < 9
              - var imgUrl = (track.album.images && track.album.images.length > 2) ? track.album.images[2].url : (track.album.images && track.album.images.length ? track.album.images[0].url : '');
              li.recent-track
                img(src=imgUrl, alt="cover", width="40")
                .recent-info
                  span.recent-artist= track.artists[0].name
                  br
                  span.recent-title= track.name
        else
          li No recent tracks found.

    .container-main
      .music-now
        if item && item.album && item.album.images && item.album.images.length
          img.music-cover(src=item.album.images[0].url, alt="Album cover")
          .music-info
            span.playing-label Currently Playing:
            span.music-artist #{artist.name}
            span.music-title #{item.name}
        else
          | Nothing is currently playing
          
      .collections-area
        .collections-grid
          - const startIdx = ((typeof page !== 'undefined' ? page : 1) - 1) * 9;
          - const genresPage = allGenres && allGenres.length ? allGenres.slice(startIdx, startIdx + 9) : Array(9).fill(null);
          each genre, idx in genresPage
            if genre
              a.collection-folder(href=`/collection/${encodeURIComponent(genre)}`)
                span.folder-icon üóÇÔ∏è
                span.folder-label= genre.charAt(0).toUpperCase() + genre.slice(1)
            else
              .collection-folder.empty

        if totalPages && totalPages > 1
          .pagination
            if page > 1
              a(href=`?page=${page-1}`) Previous
            else
              span.disabled Previous
            span.page-info Page #{page} of #{totalPages}
            if page < totalPages
              a(href=`?page=${page+1}`) Next
            else
              span.disabled Next

    .sidebar#sidebarGenres.sidebar--visible
      h2 Genres
      if artist.genres && artist.genres.length
        ul.genre-list
          each genre in artist.genres
            li= genre.charAt(0).toUpperCase() + genre.slice(1)
      else
        p No genres found.

    // Fim do else
    script.
      let currentTrackId = null;

      const btn = document.getElementById('toggleGenres');
      const sidebar = document.getElementById('sidebarGenres');
      btn.addEventListener('click', () => {
        sidebar.classList.toggle('sidebar--visible');
      });

      async function fetchCurrentlyPlaying() {
        console.log('Verificando m√∫sica atual...');
        const res = await fetch('/api/currently-playing');
        const data = await res.json();
        const musicNow = document.querySelector('.music-now');
        const sidebar = document.getElementById('sidebarGenres');
        if (data.item && data.artist) {
          if (data.item.id !== currentTrackId) {
            console.log('Atualizando m√∫sica:', data.item.name);
            currentTrackId = data.item.id;
            musicNow.innerHTML = `
              <img class="music-cover" src="${data.item.album.images[0].url}" alt="Album cover">
              <div class="music-info">
                <span class="playing-label">Currently Playing:</span>
                <span class="music-artist">${data.artist.name}</span>
                <span class="music-title">${data.item.name}</span>
              </div>
            `;
            let genresHtml = '<h2>Genres</h2>';
            if (data.artist.genres && data.artist.genres.length) {
              genresHtml += '<ul class="genre-list">';
              data.artist.genres.forEach(genre => {
                genresHtml += `<li>${genre.charAt(0).toUpperCase() + genre.slice(1)}</li>`;
              });
              genresHtml += '</ul>';
            } else {
              genresHtml += '<p>No genres found.</p>';
            }
            sidebar.innerHTML = genresHtml;
          } else {
            console.log('M√∫sica n√£o mudou, nada a atualizar.');
          }
        } else {
          if (currentTrackId !== null) {
            console.log('Nenhuma m√∫sica tocando');
            musicNow.innerHTML = 'Nothing is currently playing';
            sidebar.innerHTML = '<h2>Genres</h2><p>No genres found.</p>';
            currentTrackId = null;
          }
        }
      }
      setInterval(fetchCurrentlyPlaying, 5000);